// 실습 1 

#include "mbed.h"
#include "MPU6050.h"

DigitalOut myled(LED1);
Serial pc(USBTX, USBRX);
//I2C    i2c(I2C_SDA, I2C_SCL);
MPU6050 mpu;

int16_t ax, ay, az;
int16_t gx, gy, gz;

int main()
{
    pc.printf("MPU6050 test\n\n");
    pc.printf("MPU6050 initalize \n");

    mpu.initialize();
    pc.printf("MPU6050 testConnection \n");

    bool MPU6050TestResult = mpu.testConnection();

    if(MPU6050TestResult){
        pc.printf("MPU6050 test passed \n");
    }
    else{
        pc.printf("MPU6050 test failed \n");
    }

    while(1){
        wait_ms(500);
        mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
        //writint current accelerometor and gyro position
        //pc.printf("%d;%d;%d;%d;%d\n",&ax, &ay, &az, &gx, &gy, &gz);
        pc.printf("gx = %d\t gy = %d\t gz = %d\n", gx,gy,gz);
    }
}

실습 2는 정육면체 만드는 것이였는데 오류가 있었으니 패스 

실습 3 자이로 스코프에서 값을 받아 회전하는 정육면체 그리기 
  #include "mbed.h"
#include "MPU6050.h"
#include "Adafruit_SSD1306.h"
#include <math.h>

#define PI 3.1415

DigitalOut myled(LED1); // LED1을 제어하는 DigitalOut 객체
Serial pc(USBTX, USBRX); // 시리얼 통신을 위한 Serial 객체
MPU6050 mpu; // MPU6050 센서를 위한 객체
I2C i2c_bled(PB_9, PB_8); // OLED 디스플레이를 위한 I2C 객체
Adafruit_SSD1306_I2c bled(i2c_bled, PA_8, 0x78, 64, 128); // OLED 디스플레이를 위한 Adafruit_SSD1306_I2c 객체
int16_t ax, ay, az; // 가속도 센서 값
int16_t gx, gy, gz; // 자이로스코프 센서 값
float pitch = 0.0; // 피치 각도
float roll = 0.0; // 롤 각도
float yaw = 0.0; // 요 각도

// 회전 큐브를 그리는 함수
void drawRotatingCube(float roll, float pitch, float yaw) {
    bled.printf("AcX = %d\n,AcY = %d\n,AcZ = %d\n,GyX = %d\n,GyY = %d\n,GyZ = %d", ax,ay,az,gx,gy,gz);
    bled.clearDisplay();
    bled.setTextSize(1);
    bled.setTextCursor(0, 0);

    // 큐브의 크기와 중심 위치 설정
    int cubeSize = 20;
    int centerX = 96; // 디스플레이 가로 중앙
    int centerY = 32; // 디스플레이 세로 중앙

    // 회전 변환 행렬 계산
    float cosRoll = cos(roll);
    float sinRoll = sin(roll);
    float cosPitch = cos(pitch);
    float sinPitch = sin(pitch);
    float cosYaw = cos(yaw);
    float sinYaw = sin(yaw);

    // 꼭짓점 배열 (8개 꼭짓점)
    float vertices[8][3];

    // 각 꼭짓점의 초기 위치 계산
    for (int i = 0; i < 8; i++) {
        int dx = i % 2 == 0 ? cubeSize : -cubeSize;
        int dy = (i >> 1) % 2 == 0 ? cubeSize : -cubeSize;
        int dz = (i >> 2) % 2 == 0 ? cubeSize : -cubeSize;

        vertices[i][0] = centerX + dx;
        vertices[i][1] = centerY + dy;
        vertices[i][2] = dz;
    }

    // 회전 변환 적용하여 새로운 위치 계산
    for (int i = 0; i < 8; i++) {
        float x = vertices[i][0] - centerX;
        float y = vertices[i][1] - centerY;
        float z = vertices[i][2];

        // x, y, z 축 회전 변환 계산
        float newX = x * (cosYaw * cosPitch) - y * (sinYaw * cosRoll + cosYaw * sinPitch * sinRoll) + z * (sinYaw * sinRoll - cosYaw * cosRoll * sinPitch);
        float newY = x * (-sinYaw * cosPitch) - y * (cosYaw * cosRoll - sinYaw * sinPitch * sinRoll) + z * (cosYaw * sinRoll + sinYaw * cosRoll * sinPitch);
        float newZ = x * sinPitch - y * cosPitch * sinRoll + z * cosPitch * cosRoll;

        vertices[i][0] = centerX + newX;
        vertices[i][1] = centerY + newY;
        vertices[i][2] = newZ;
    }

    // 큐브의 모서리 그리기
    int edges[12][2] = {
        {0, 1}, {1, 3}, {3, 2}, {2, 0},
        {4, 5}, {5, 7}, {7, 6}, {6, 4},
        {0, 4}, {1, 5}, {2, 6}, {3, 7}
    };

    for (int i = 0; i < 12; i++) {
        int startVertex = edges[i][0];
        int endVertex = edges[i][1];
        bled.drawLine(vertices[startVertex][0], vertices[startVertex][1], vertices[endVertex][0], vertices[endVertex][1], WHITE);
    }

    bled.display();
}

int main() {
    pc.printf("MPU6050 테스트\n\n");
    pc.printf("MPU6050 초기화\n");

    mpu.initialize();

    pc.printf("MPU6050 연결 테스트\n");

    bool mpu6050TestResult = mpu.testConnection();
    if (mpu6050TestResult) {
        pc.printf("MPU6050 연결 테스트 통과\n");
    } else {
        pc.printf("MPU6050 연결 테스트 실패\n");
    }

    // 디스플레이 설정
    bled.clearDisplay();
    bled.display();

    while (1) {
        wait(0.05); // 업데이트 속도 조절
        mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

        // 롤, 피치, 요 각도 계산
        pitch = atan2(ax, sqrt(ay * ay + az * az));
        roll = atan2(-ay, az);
        yaw = atan2(2.0 * (gx * gy + az * ay), 1.0 - 2.0 * (gy * gy + az * az));

        // OLED 디스플레이에 회전 큐브 그리기
        drawRotatingCube(roll, pitch, yaw);
    }
}
